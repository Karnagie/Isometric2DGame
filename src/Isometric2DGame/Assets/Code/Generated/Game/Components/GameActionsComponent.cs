//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherActions;

    public static Entitas.IMatcher<GameEntity> Actions {
        get {
            if (_matcherActions == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Actions);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherActions = matcher;
            }

            return _matcherActions;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Core.Features.ActionPlanning.Actions actions { get { return (Code.Core.Features.ActionPlanning.Actions)GetComponent(GameComponentsLookup.Actions); } }
    public System.Collections.Generic.Dictionary<string, Code.Core.Features.ActionPlanning.EnemyActions.Action> Actions { get { return actions.Value; } }
    public bool hasActions { get { return HasComponent(GameComponentsLookup.Actions); } }

    public GameEntity AddActions(System.Collections.Generic.Dictionary<string, Code.Core.Features.ActionPlanning.EnemyActions.Action> newValue) {
        var index = GameComponentsLookup.Actions;
        var component = (Code.Core.Features.ActionPlanning.Actions)CreateComponent(index, typeof(Code.Core.Features.ActionPlanning.Actions));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceActions(System.Collections.Generic.Dictionary<string, Code.Core.Features.ActionPlanning.EnemyActions.Action> newValue) {
        var index = GameComponentsLookup.Actions;
        var component = (Code.Core.Features.ActionPlanning.Actions)CreateComponent(index, typeof(Code.Core.Features.ActionPlanning.Actions));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveActions() {
        RemoveComponent(GameComponentsLookup.Actions);
        return this;
    }
}
