//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherLayer;

    public static Entitas.IMatcher<GameEntity> Layer {
        get {
            if (_matcherLayer == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Layer);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherLayer = matcher;
            }

            return _matcherLayer;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Core.Common.LayerComponent layer { get { return (Code.Core.Common.LayerComponent)GetComponent(GameComponentsLookup.Layer); } }
    public Code.Core.Common.Layers.Layer Layer { get { return layer.Value; } }
    public bool hasLayer { get { return HasComponent(GameComponentsLookup.Layer); } }

    public GameEntity AddLayer(Code.Core.Common.Layers.Layer newValue) {
        var index = GameComponentsLookup.Layer;
        var component = (Code.Core.Common.LayerComponent)CreateComponent(index, typeof(Code.Core.Common.LayerComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceLayer(Code.Core.Common.Layers.Layer newValue) {
        var index = GameComponentsLookup.Layer;
        var component = (Code.Core.Common.LayerComponent)CreateComponent(index, typeof(Code.Core.Common.LayerComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveLayer() {
        RemoveComponent(GameComponentsLookup.Layer);
        return this;
    }
}
