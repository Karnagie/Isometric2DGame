//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherMovementPoint;

    public static Entitas.IMatcher<GameEntity> MovementPoint {
        get {
            if (_matcherMovementPoint == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.MovementPoint);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherMovementPoint = matcher;
            }

            return _matcherMovementPoint;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Core.Features.Movement.MovementPoint movementPoint { get { return (Code.Core.Features.Movement.MovementPoint)GetComponent(GameComponentsLookup.MovementPoint); } }
    public UnityEngine.Vector2 MovementPoint { get { return movementPoint.Value; } }
    public bool hasMovementPoint { get { return HasComponent(GameComponentsLookup.MovementPoint); } }

    public GameEntity AddMovementPoint(UnityEngine.Vector2 newValue) {
        var index = GameComponentsLookup.MovementPoint;
        var component = (Code.Core.Features.Movement.MovementPoint)CreateComponent(index, typeof(Code.Core.Features.Movement.MovementPoint));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceMovementPoint(UnityEngine.Vector2 newValue) {
        var index = GameComponentsLookup.MovementPoint;
        var component = (Code.Core.Features.Movement.MovementPoint)CreateComponent(index, typeof(Code.Core.Features.Movement.MovementPoint));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveMovementPoint() {
        RemoveComponent(GameComponentsLookup.MovementPoint);
        return this;
    }
}
