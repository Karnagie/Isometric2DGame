//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherValue;

    public static Entitas.IMatcher<GameEntity> Value {
        get {
            if (_matcherValue == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Value);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherValue = matcher;
            }

            return _matcherValue;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Common.ValueComponent value { get { return (Code.Common.ValueComponent)GetComponent(GameComponentsLookup.Value); } }
    public float Value { get { return value.Value; } }
    public bool hasValue { get { return HasComponent(GameComponentsLookup.Value); } }

    public GameEntity AddValue(float newValue) {
        var index = GameComponentsLookup.Value;
        var component = (Code.Common.ValueComponent)CreateComponent(index, typeof(Code.Common.ValueComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceValue(float newValue) {
        var index = GameComponentsLookup.Value;
        var component = (Code.Common.ValueComponent)CreateComponent(index, typeof(Code.Common.ValueComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveValue() {
        RemoveComponent(GameComponentsLookup.Value);
        return this;
    }
}
