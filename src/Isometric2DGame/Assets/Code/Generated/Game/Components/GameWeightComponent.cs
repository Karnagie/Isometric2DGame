//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherWeight;

    public static Entitas.IMatcher<GameEntity> Weight {
        get {
            if (_matcherWeight == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Weight);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherWeight = matcher;
            }

            return _matcherWeight;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Core.Common.Physics.Weight weight { get { return (Code.Core.Common.Physics.Weight)GetComponent(GameComponentsLookup.Weight); } }
    public float Weight { get { return weight.Value; } }
    public bool hasWeight { get { return HasComponent(GameComponentsLookup.Weight); } }

    public GameEntity AddWeight(float newValue) {
        var index = GameComponentsLookup.Weight;
        var component = (Code.Core.Common.Physics.Weight)CreateComponent(index, typeof(Code.Core.Common.Physics.Weight));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceWeight(float newValue) {
        var index = GameComponentsLookup.Weight;
        var component = (Code.Core.Common.Physics.Weight)CreateComponent(index, typeof(Code.Core.Common.Physics.Weight));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveWeight() {
        RemoveComponent(GameComponentsLookup.Weight);
        return this;
    }
}
