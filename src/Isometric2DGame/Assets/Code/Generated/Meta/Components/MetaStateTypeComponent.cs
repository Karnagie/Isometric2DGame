//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class MetaMatcher {

    static Entitas.IMatcher<MetaEntity> _matcherStateType;

    public static Entitas.IMatcher<MetaEntity> StateType {
        get {
            if (_matcherStateType == null) {
                var matcher = (Entitas.Matcher<MetaEntity>)Entitas.Matcher<MetaEntity>.AllOf(MetaComponentsLookup.StateType);
                matcher.componentNames = MetaComponentsLookup.componentNames;
                _matcherStateType = matcher;
            }

            return _matcherStateType;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class MetaEntity {

    public Code.Common.Scenes.StateTypeComponent stateType { get { return (Code.Common.Scenes.StateTypeComponent)GetComponent(MetaComponentsLookup.StateType); } }
    public Code.Common.Scenes.StateType StateType { get { return stateType.Value; } }
    public bool hasStateType { get { return HasComponent(MetaComponentsLookup.StateType); } }

    public MetaEntity AddStateType(Code.Common.Scenes.StateType newValue) {
        var index = MetaComponentsLookup.StateType;
        var component = (Code.Common.Scenes.StateTypeComponent)CreateComponent(index, typeof(Code.Common.Scenes.StateTypeComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public MetaEntity ReplaceStateType(Code.Common.Scenes.StateType newValue) {
        var index = MetaComponentsLookup.StateType;
        var component = (Code.Common.Scenes.StateTypeComponent)CreateComponent(index, typeof(Code.Common.Scenes.StateTypeComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public MetaEntity RemoveStateType() {
        RemoveComponent(MetaComponentsLookup.StateType);
        return this;
    }
}
